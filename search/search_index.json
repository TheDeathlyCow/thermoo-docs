{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Thermoo","text":"<p>Welcome to the Thermoo Developer wiki! Thermoo is a temperature and environment library mod for Minecraft, targeting the Fabric and Quilt ecosystems. It is meant to help provide compatibility between mods and datapacks that use temperature as a core mechanic, such as Frostiful or Scorchful. Using this mod on its own will have no gameplay or visual effects. It is designed to be used by Mods written in both Java and Kotlin, as well as Datapacks through Commands and other registries.</p> <p>Normally, Thermoo is required on both client and server. However, Thermoo may be made compatible with vanilla clients on dedicated servers with Polymer installed. So if you want to use Thermoo to make fully server sided custom datapacks, then make sure to install Polymer!</p>"},{"location":"#for-players","title":"\ud83c\udfae For Players","text":"<p>Thermoo is a library mod, and as such by itself should not have any gameplay effects. For mods that use Thermoo see Frostiful and Scorchful.</p>"},{"location":"#for-developers","title":"\ud83d\udcbb For Developers","text":"<p>For both datapack and mod authors, it is recommended to read the API Overview page first, as it will cover the basics of Thermoo's concepts and systems, along with a few examples. This below lists serve as more in-depth references for the individual APIs that Thermoo provides to make interactions with these core systems easier.</p> <p>For Modders, there is also extensive Javadoc provided for all of Thermoo's public APIs. That should be the primary reference for using any event/method in the mod side of the API as it will likely be the most up-to-date and precise.</p>"},{"location":"#thermoo-core","title":"\ud83c\udf21\ufe0f Thermoo Core","text":"<ul> <li>API Overview</li> <li>Thermoo Command</li> <li>Entity Attributes</li> </ul>"},{"location":"#mod-utility-apis","title":"\ud83d\udd27 Mod Utility APIs","text":"<ul> <li>Item Attribute API</li> <li>Season API</li> <li>Status Bar Overlay API (client only)</li> <li>Temperature Unit</li> <li>Tick Events</li> </ul>"},{"location":"#datapack-utilities","title":"\ud83d\udce6 Datapack Utilities","text":"<ul> <li>Custom Loot Conditions</li> <li>Environment Definition</li> <li>Environment Provider Definition</li> <li>Tags</li> <li>Temperature Effect Definition</li> </ul>"},{"location":"#deprecated-apis","title":"\ud83e\udea6 Deprecated APIs","text":"<ul> <li>Armor Materials API</li> <li>Environment Controller API</li> <li>Item Attribute Modifier Definition</li> </ul> <p>Warning</p> <p>Thermoo is made for the Fabric mod loader, and also supports the Quilt mod loader. It may run on NeoForge using Sinytra Connector, however this usage is not supported. Support queries and issues from users not using Fabric or Quilt will be closed/ignored.</p>"},{"location":"#examples","title":"Examples","text":"<p>The best example of how to use Thermoo is provided by the mods Frostiful and Scorchful, as they are made by me! They include examples on how to apply temperature, how to listen to temperature-related events, how to use the datapack integrations, and how to display temperature to the player. However, if you have any questions feel free to ask on my Discord</p>"},{"location":"#lts-policy","title":"LTS Policy","text":"<p>This is the current support status for each version of Minecraft that Thermoo is available for. The current Long-Term Support (LTS) policy for Thermoo versions is to support 1.21.1 and the latest game drop. Version 1.21.1 will be supported until at least the release of the Vibrant Visuals update for Java Edition.</p> <p>Supported versions will receive all new features, fixes, and updates (where possible).</p> <p>Unsupported versions version will receive no future updates, except for critical security fixes.</p> Minecraft Version Support Status 1.21.9-10  Supported 1.21.6-8  Unsupported 1.21.5  Unsupported 1.21.2-4  Unsupported 1.21.1  Supported 1.20.5-6  Skipped 1.20.3-4  Unsupported 1.20.2  Unsupported 1.20-1.20.1  Unsupported 1.19.4  Unsupported 1.19.2  Unsupported"},{"location":"#requires-thermoo-badge","title":"Requires Thermoo Badge","text":"<p>Feel free to add this to your mod page if you use Thermoo: <code>https://i.imgur.com/MjlOmH0.png</code></p> <p></p>"},{"location":"#wiki-source","title":"Wiki Source","text":"<p>The source code for this wiki may be found at https://github.com/theDeathlyCow/thermoo-docs, contributions are welcome!</p>"},{"location":"api_overview/","title":"API Overview","text":"<p>Info</p> <p>This website primarily uses the Official Mappings (aka MojMap) for its code-based examples. Thermoo was originally written with Yarn mappings in mind, but migrated to Official Mappings soon after it was announced that Minecraft would no longer publish obfuscated JARs. Feel free to raise an issue here if there are any examples not working due to mixed mappings.</p> <p>Thermoo is a temperature and environment library for the Fabric and Quilt modding platforms. This page will provide a basic overview of how to set up and interact with the library in your mod or datapack. As of 1.21, Thermoo is required to be installed on both the client and server in order to function properly.</p> <p>This is a rather long page, so it may be best to follow along in your own mod/datapack while reading, or to skim the page first. There is also a sidebar to help with navigation! Remember that I also have a Discord where I am happy to help and answer questions related to Thermoo.</p>"},{"location":"api_overview/#setup","title":"Setup","text":"<p>See the Setup page if this is your first time using Thermoo.</p>"},{"location":"api_overview/#entity-temperature","title":"Entity Temperature","text":"<p>Thermoo tracks entity temperature as an integer value that is stored on all living entities (that is, entities with health, attributes, etc). This value is the number of ticks that the entity has been exposed to temperature. Positive values indicate that the entity is warm, and negative values indicate that the entity is cold. An entity with a temperature of <code>0</code> is both warm and cold. You can think of this as being similar to the vanilla <code>TicksFrozen</code> value, but inverted to allow for high temperatures.</p>"},{"location":"api_overview/#getting-and-setting-temperature","title":"Getting and Setting Temperature","text":"<p>In mods, temperature is accessed through the <code>TemperatureAware</code> interface, which is implemented on <code>LivingEntity</code> through interface injection.</p> <p>For datapacks, temperature can be accessed through a command.</p> Mods (Java)Mods (Kotlin)Datapacks (Commands) <pre><code>void foo(LivingEntity entity) {\n    // Methods are automatically injected onto LivingEntity by mixin\n    int temperature = entity.thermoo$getTemperature();\n\n    entity.thermoo$setTemperature(0);\n}\n</code></pre> <pre><code>// Special Kotlin-only extensions that remove the thermoo$ prefix\nimport com.github.thedeathlycow.thermoo.kt.TemperatureAwareExtensions\n\nfun foo(entity: LivingEntity) {\n    // Using field extensions\n    val temperature: Int = entity.temperature\n    entity.temperature = 0\n\n    // Without field extensions, you still use the underlying methods.\n    // Methods are automatically injected onto LivingEntity by mixin\n    val temperature: Int = entity.`thermoo$getTemperature`()\n    entity.`thermoo$setTemperature`(0)\n}\n</code></pre> <pre><code># All Thermoo commands are technically sub-commands of /thermoo\n# Only displays in chat\nthermoo temperature get @s current\n\n# The result is returned by the command can be stored in all normal places \nexecute store result score Temperature PlayerData run thermoo temperature get @s current\n\nthermoo temperature set @s 0\n\n# Setting by variable requires a macro\n$thermoo temperature set @s $(temperature_in)\n</code></pre>"},{"location":"api_overview/#minimum-and-maximum-temperature-and-scale","title":"Minimum and Maximum Temperature and Scale","text":"<p>The entity temperature value has a minimum and maximum value that controls how cold/hot they can get. Whenever an entity's temperature is updated, the new temperature value will be clamped to its minimum and maximum temperature range.</p> <p>The minimum and maximum temperature values of an entity are set by attributes. There is an attribute for minimum temperature (<code>thermoo:min_temperature</code>) and maximum temperature (<code>thermoo:max_temperature</code>). The final max/min temperature values are calculated as <code>140</code> times the max temperature attribute value, or <code>-140</code> times the min temperature attribute value.<sup>1</sup> The minimum (and default) value of these attributes in Thermoo is <code>0</code>, but mods (like Frostiful and Scorchful) may change this. For example, an entity with a <code>thermoo:min_temperature</code> attribute value of <code>45</code> will have a minimum temperature of <code>-6300</code>.</p> <p>Info</p> <p>In Thermoo 4.x and below (for Minecraft 1.21.1 and below) all Thermoo attributes followed the convention of having a <code>generic</code> prefix in their name. For example, <code>thermoo:generic.min_temperature</code>. In Thermoo 5.0 and above (for Minecraft 1.21.2+), this was removed. Please use the appropriate ID for your version!</p> <p>A temperature scale is also available to be queried, based on the entity's current temperature and max/min temperature values. The temperature scale is a percentage value in the range <code>[-1, 1]</code> that represents the entity's current temperature value divided by their maximum temperature (if warm), or by their minimum temperature (if cold). This scale is frequently used in temperature effects and is often used when determining exactly how \"cold\" an entity is.</p>"},{"location":"api_overview/#usage-example","title":"Usage Example","text":"Mods (Java)Mods (Kotlin)Datapacks (Commands) <pre><code>void foo(LivingEntity entity) {\n    // Returns the final max temperature value (140 * attribute value)\n    int maxTemperature = entity.thermoo$getMaxTemperature();\n\n    // Getting the actual attribute value\n    double maxTemperatureAttribute = entity.getAttributeValue(ThermooAttributes.MAX_TEMPERATURE);\n\n    // Percentage in range [-1, 1], frequently used for temperature effects\n    float scale = entity.thermoo$getTemperatureScale();\n}\n</code></pre> <pre><code>import com.github.thedeathlycow.thermoo.kt.TemperatureAwareExtensions\n\nfun foo(entity: LivingEntity) {\n    // Returns the final max temperature value (140 * attribute value)\n    val maxTemperature: Int = entity.maxTemperature\n\n    // Getting the actual attribute value\n    val maxTemperatureAttribute: Double = entity.getAttributeValue(ThermooAttributes.MAX_TEMPERATURE)\n\n    // Percentage in range [-1, 1], frequently used for temperature effects\n    val scale: Float = entity.minTemperature\n}\n</code></pre> <pre><code># Returns the final max temperature value (140 * attribute value)\nthermoo temperature get @s max\n\n# Getting the actual attribute value\nattribute @s thermoo:max_temperature get\n\n# Multiples the [-1, 1] scale percentage by the `scale` argument to obtain a readable integer value for commands (default: 100)\nthermoo temperature get @s scale [&lt;scale&gt;]\n</code></pre> <p><sup>1</sup> The value <code>140</code> was chosen as the multiplier for min/max temperature as it is the vanilla maximum value for the <code>TicksFrozen</code> attribute, so think of the attributes as multipliers of that vanilla maximum.</p>"},{"location":"api_overview/#temperature-changes-and-resistances","title":"Temperature Changes and Resistances","text":"<p>Usually, when an entity's temperature is increased or decreased, it is done through an <code>add</code> procedure, rather than by directly setting a new value. This <code>add</code> procedure is what applies temperature resistances so that mobs and players can counter environment exposure. These resistances are also controlled by attributes.</p> <p>When reducing temperature, the attribute <code>thermoo:frost_resistance</code> is applied. Similarly, when increasing temperature, the attribute <code>thermoo:heat_resistance</code> is applied. Each point of these attributes correspond to a <code>10%</code> reduction of incoming temperature change. So a Frost Resistance value of 1 will reduce the power temperature decreases by 10%, and a Heat Resistance value of 10 will reduce the power of temperature increases by 100%. These values can also be negative, making their corresponding temperature change worse.</p> <p>However, these resistances are only applied based on the mode of the temperature change. Thermoo provides four of these heating modes: <code>absolute</code>, <code>active</code>, <code>passive</code>, and <code>environment</code>.</p> <ul> <li>The <code>absolute</code> mode is the default heating mode, and does not apply and resistances, it would be equivalent to   applying a method like <code>set(current + change)</code>. For most gameplay purposes, however, the <code>absolute</code> mode should not be   used.</li> <li>The <code>active</code> mode always applies the corresponding resistance to the incoming change. This mode should be used when   some sort of targeted effect is applied to the entity, such as a freezing spell or being set on fire.</li> <li>The <code>passive</code> mode only applied the resistance when the target's temperature is in the relevant temperature range. For   example, frost resistance will be applied to a temperature decrease only when the target is already cold. This mode   should be used when dealing with temperature changes from nearby blocks, like standing on Ice or the heat of a   Campfire.</li> <li>The <code>environment</code> mode is an internal mode that applies the environment resistance   attributes, <code>thermoo:environment_frost_resistance</code> and <code>thermoo:environment_heat_resistance</code>, to temperature changes   from the Environment API (see below). This mode is only used internally and cannot be accessed in the public API.</li> </ul>"},{"location":"api_overview/#usage-examples","title":"Usage Examples","text":"<p>Adding 10 temperature per tick when on fire, always applying heat resistance.</p> Mods (Java)Mods (Kotlin)Datapacks (Commands) <pre><code>void tick(LivingEntity entity) {\n    if (entity.isOnFire()) {\n        entity.thermoo$addTemperature(10, HeatModes.ACTIVE);\n    }\n}\n</code></pre> <pre><code>import com.github.thedeathlycow.thermoo.kt.TemperatureAwareExtensions\n\nfun tick(entity: LivingEntity) {\n    if (entity.onFire) {\n        entity.addTemperature(10, mode = HeatingMods.ACTIVE)\n\n        // Beware! This will be an absolute change and will NOT apply resistances\n        entity.temperature += 10\n    }\n}\n</code></pre> <pre><code># Makes this function run every tick\nschedule function example:this_function 1t replace\n\nexecute if predicate example:is_on_fire run thermoo temperature add @s 10 active\n</code></pre> <p>Remove 10 temperature per tick when in powder snow, passively applying Frost Resistance</p> Mods (Java)Mods (Kotlin)Datapacks (Commands) <pre><code>void tick(LivingEntity entity) {\n    // yes this is a field\n    if (entity.isInPowderSnow || entity.wasInPowderSnow) {\n        entity.thermoo$addTemperature(-10, HeatModes.PASSIVE);\n    }\n}\n</code></pre> <pre><code>import com.github.thedeathlycow.thermoo.kt.TemperatureAwareExtensions\n\nfun tick(entity: LivingEntity) {\n    // yes this is a field\n    if (entity.isInPowderSnow || entity.wasInPowderSnow) {\n        entity.addTemperature(-10, mode = HeatModes.PASSIVE)\n    }\n}\n</code></pre> <pre><code># Makes this function run every tick\nschedule function example:this_function 1t replace\n\nexecute if block ~ ~ ~ minecraft:powder_snow run thermoo temperature remove @s 10 passive\n</code></pre> <p></p>"},{"location":"api_overview/#soaking-and-wetness","title":"Soaking and Wetness","text":"<p>Similar to temperature, wetness is also a tracked value for living entities in Thermoo. Wetness is an integer value that has a minimum value of <code>0</code> and a default maximum value of <code>600</code>. This is just a simple tracker for how many ticks an entity has been exposed to water.</p> <p>The Soaking max value can be changed with the attribute <code>thermoo:max_soaking_tick_multiplier</code>. As the name says, this attribute is a multiplier of the base value of <code>600</code>, so the final max wet ticks value equals <code>floor(600 * valueOf(max_soaking_tick_multiplier))</code>.</p> <p>For modders, wetness is exposed through the <code>Soakable</code> interface, which is injected onto <code>LivingEntity</code> by mixin just like <code>TemperatureAware</code>.</p> <p>For datapack authors, wetness can be interacted with through the command <code>/thermoo soaking</code>.</p>"},{"location":"api_overview/#usage-example_1","title":"Usage Example","text":"Mods (Java)Mods (Kotlin)Datapacks (Commands) <pre><code>void foo(LivingEntity entity) {\n    // getting current wet ticks\n    int wetTicks = entity.thermoo$getWetTicks();\n\n    // setting wet ticks to the max value\n    int max = entity.thermoo$getMaxWetTicks();\n    entity.thermoo$setWetTicks(max);\n\n    // getting 0-1 percentage scale of wetness\n    float soakedScale = entity.thermoo$getSoakedScale();\n}\n</code></pre> <pre><code>// Similar Kotlin-only extensions as TemperatureAware\nimport com.github.thedeathlycow.thermoo.api.kt.SoakableExtensions\n\nfun foo(entity: LivingEntity) {\n    // getting current wet ticks\n    val wetTicks: Int = entity.wetTicks\n\n    // setting wet ticks to the max value\n    entity.wetTicks = entity.maxWetTicks\n\n    // getting 0-1 percentage scale of wetness\n    val soakedScale: Float = entity.soakedScale\n}\n</code></pre> <pre><code># Getting current wet ticks\nthermoo soaking get @s current\n\n# Setting wet ticks to the default max value\nthermoo soaking set @s 600\n\n# Multiples the [-1, 1] soaked scale percentage by the `scale` argument to obtain a readable integer value for commands (default: 100)\nthermoo soaking get @s scale [&lt;scale&gt;]\n</code></pre>"},{"location":"api_overview/#temperature-effects","title":"Temperature Effects","text":"<p>Temperature Effects are a Datapack registry that can be used to apply various kinds of effects to entities based on their current temperature and other conditions each tick. They are used for both mods and datapacks, and can be used in place of hard-coded tick methods and listeners. The full format is documented on the Temperature Effect page.</p>"},{"location":"api_overview/#usage-example_2","title":"Usage example","text":"<p>Applies Mining Fatigue to cold players</p> data/example/thermoo/temperature_effect/mob_effect.json<pre><code>{\n    \"type\": \"thermoo:mob_effect\",\n    \"entity_type\": \"minecraft:player\",\n    \"temperature_scale_range\": {\n        \"max\": -0.5\n    },\n    \"config\": {\n        \"effects\": [\n            {\n                \"amplifier\": 0,\n                \"duration\": 20,\n                \"effect\": \"minecraft:mining_fatigue\"\n            }\n        ]\n    }\n}\n</code></pre> <p></p>"},{"location":"api_overview/#environment-api","title":"Environment API","text":"<p>The Environment API sets and defines the parameters of a player's current environment and converts these to changes in temperature exposure. This is a large API that interfaces between both mods and datapacks and with many of the other APIs provided by Thermoo, so don't worry if you get a little overwhelmed. I also have a Discord where I am happy to answer questions or provide assistance as needed.</p>"},{"location":"api_overview/#environment-components","title":"Environment Components","text":"<p>Environment parameters are provided as a set of components (just like items!) that are set by an environment provider for a world position. Thermoo will update and provide these values to a mod-only set of events for every player each tick. These parameters can then be converted into temperature point changes and other effects. This is a large API with many complicated parts, so examples can be helpful. The Thermoo Test Mod provides some examples, but the best examples of it in practice can be found in Frostiful and Scorchful.</p> <p>Thermoo currently provides two environment component types: <code>thermoo:temperature</code> and <code>thermoo:relative_humidity</code>. The Temperature component is stored in a special Temperature Record object that contains a temperature value and a unit (such as Celsius or Fahrenheit), which records the current temperature of the block position. The relative humidity is a 0-1 percentage of the area's current relative humidity. Custom component types may be added by mods to the registry <code>ThermooRegistries.ENVIRONMENT_COMPONENT_TYPE</code>.</p>"},{"location":"api_overview/#environment-definition-and-environment-providers","title":"Environment Definition and Environment Providers","text":"<p>The environment has two main datapack registries for environment parameters: the Environment registry, and the Environment Provider registry. The Environment registry is what makes the parameters visible to Thermoo, and entries in the Environment Provider registry are what actually calculate the parameters.</p> <p>Entries for the Environment and Environment Provider registries go in the folders <code>thermoo/environment</code> and <code>thermoo/environment_provider</code> respectively. However, Environment Providers can, and often are, in-lined to Environments directly.</p> <p>In order for Thermoo to detect your set of environment parameters, you must define the environment for a set of biomes in the datapack registry <code>thermoo/environment</code>. This includes the provider, the biomes the environment provides for, and the biomes the environment does not provide for. As a rule of thumb, it is best for each biome to only have one environment for it at a time, as multiple environments will overwrite each other based on load order which may lead to inconsistent behaviour.</p> <p>There are many types of environment providers, which work like a tree with many different branch provider types that select a child provider based on the current state of some parameter (like season, light level, or weather conditions). The <code>thermoo:constant</code> provider just returns a constant set of parameters, and is the primary \"leaf\" provider.</p> <p>Much like custom components, mods can also define custom provider types to the registry <code>ThermooRegistries.ENVIRONMENT_PROVIDER_TYPE</code>.</p> <p>The full format for these registries can be found on the Environment Definition and Environment Provider pages.</p>"},{"location":"api_overview/#usage-examples_1","title":"Usage Examples","text":"<p>Defining the temperature for snowy biomes based on the season (datapack-only).</p> data/example/thermoo/environment/snowy_temperature.json<pre><code>// Note: comments are not allowed in the actual JSON files\n{\n    // This is the environment definition\n    \"biomes\": \"#c:is_snowy\", // apply to snowy biomes...\n    \"exclude_biomes\": \"#c:is_icy\", // ...but not icy biomes\n    \"provider\": {\n        // everything here is now an in-line defined environment provider\n        \"type\": \"thermoo:seasonal/temperate\",\n        \"fallback_season\": \"spring\",\n        \"seasons\": {\n            \"spring\": \"example:freezing\", // reference another provider\n            \"summer\": { // or inline the provider\n                \"type\": \"thermoo:constant\",\n                \"components\": {\n                    \"thermoo:temperature\": 10\n                }\n            },\n            \"autumn\": \"example:freezing\",\n            \"winter\": {\n                \"type\": \"thermoo:constant\",\n                \"components\": {\n                    \"thermoo:temperature\": -10\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>This is an environment provider defined in its own file.</p> data/example/thermoo/environment_provider/freezing.json<pre><code>{\n    \"type\": \"thermoo:constant\",\n    \"components\": {\n        \"thermoo:temperature\": 0.0\n    }\n}\n</code></pre>"},{"location":"api_overview/#environment-lookup","title":"Environment Lookup","text":"<p>Once you define your environment, you can see what the current parameters are through the lookup API. Interfaces are provided for both mods and datapack commands. However, datapack commands are hard-coded to only work for the basic component types provided by Thermoo - mods that add other component types will need to define their own lookup commands for them.</p> Mods (Java)Mods (Kotlin)Datapacks (Commands) <pre><code>void foo(Level level, BlockPos pos) {\n    EnvironmentLookup lookup = EnvironmentLookup.getInstance();\n\n    ComponentMap components = look.findEnvironmentComponents(level, pos);\n\n    TemperatureRecord temperature = components.getOrDefault(\n            EnvironmentComponentTypes.TEMPERATURE,\n            TemperatureRecordComponent.DEFAULT\n    );\n    LOGGER.info(\"The current temperature is {}\", temperature);\n}\n</code></pre> <pre><code>fun foo(level: Level, pos: BlockPos) {\n    val lookup: EnvironmentLookup = EnvironmentLookup.getInstance()\n\n    val components: ComponentMap = look.findEnvironmentComponents(level, pos)\n\n    val temperature: TemperatureRecord = components.getOrDefault(\n        EnvironmentComponentTypes.TEMPERATURE,\n        TemperatureRecordComponent.DEFAULT\n    )\n    LOGGER.info(\"The current temperature is {}\", temperature)\n}\n</code></pre> <pre><code># Default unit is Celsius, but can also be Fahrenheit, Kelvin, or Rankine\nthermoo environment temperature ~ ~ ~ [&lt;unit&gt;]\n\n# Scale multiples the 0-1 relative humidity scale to a readable int value for commands. Default: 100\nthermoo environment relativehumidity ~ ~ ~ [&lt;scale&gt;]\n</code></pre>"},{"location":"api_overview/#tick-events","title":"Tick Events","text":"<p>Once the environment parameters are set, they are passed to Thermoo's various tick events. Listeners can then convert these parameters to temperature point changes for the tick, or perform other effects. Currently, environment parameters are only defined by Thermoo for players, even in events that are not exclusive to players. However, components can be looked up manually at any time using the <code>EnvironmentLookup</code> interface.</p> <p>The tick event are currently given in the classes <code>LivingEntityTemperatureTickEvents</code>, <code>LivingEntitySoakingTickEvents</code>, and <code>ServerPlayerEnvironmentTickEvents</code> (for players only). See the javadoc of these classes for more specific information on each event and its parameters.</p>"},{"location":"api_overview/#usage-examples_2","title":"Usage Examples","text":"<p>Freezing players when the temperature is low (mod-only)</p> JavaKotlin <pre><code>static final TemperatureRecord FREEZING = new TemperatureRecord(0, TemperatureUnit.CELSIUS);\n\nstatic void initialize() {\n    ServerPlayerEnvironmentTickEvents.GET_TEMPERATURE_CHANGE.register(context -&gt; {\n        TemperatureRecord temperature = context.components().getOrDefault(\n                EnvironmentComponentTypes.TEMPERATURE,\n                TemperatureRecordComponent.DEFAULT\n        );\n        return temperature.compareTo(FREEZING) &lt;= 0 ? -1 : 0;\n    });\n}\n</code></pre> <pre><code>import com.github.thedeathlycow.thermoo.api.kt.TemperatureRecordExtensions\n\nfun initialize() {\n    ServerPlayerEnvironmentTickEvents.GET_TEMPERATURE_CHANGE.register { context -&gt;\n        val temperature = context.components().getOrDefault(\n            EnvironmentComponentTypes.TEMPERATURE,\n            TemperatureRecordComponent.DEFAULT\n        )\n        return@register if (temperature &lt;= 0.C) -1 else 0\n    }\n}\n</code></pre>"},{"location":"command/","title":"Thermoo Commands","text":"<p>Thermoo introduces many different commands for interacting with its systems, as analogs to many of the methods in the Java/Kotlin modded side of the library. All commands in Thermoo are registered as subcommands of <code>/thermoo</code> for compatibility. Commands all print translated messages to chat, but come with fallbacks to US English.</p>"},{"location":"command/#environment","title":"Environment","text":"<p>The environment command interfaces with the Environment API to lookup various environment parameters. This is currently only implemented for the <code>thermoo:temperature</code> and <code>thermoo:relative_humidity</code> environment component types. Mods that create their own environment component types must also create their own lookup command for them.</p>"},{"location":"command/#environment-temperature","title":"Environment Temperature","text":"<p>Temperature is used to check the temperature reading at a specific location, or the environment temperature point change of a specific player. It is used as follows:</p> <p><pre><code>thermoo environment temperature &lt;location&gt; [&lt;unit&gt;] [&lt;scale&gt;]\n</code></pre> Returns the temperature of the location in some unit, as determined by the local environment conditions.</p> <p>Arguments: - <code>location</code>: A block position. - <code>unit</code>: An optional string, either <code>celsius</code>, <code>fahrenheit</code>, <code>kelvin</code>, or <code>rankine</code>. Determines what unit to display the temperature in. Defaults to <code>celsius</code>. - <code>scale</code>: An optional float. Multiplies the final temperature value so that commands can read the decimal point, if desired. Defaults to <code>1.0</code>.     - For example: a scale of <code>10.0</code> and a temperature of <code>31.3</code> Celsius would have the command return a result of <code>313</code> that can be stored in any of the normal targets of <code>execute store result</code>.</p> <p><pre><code>thermoo environment temperature &lt;target&gt;\n</code></pre> Returns the environment temperature point change of the player's current position as calculated by mod event listeners.</p> <p>Arguments: - <code>target</code>: A single player target.</p>"},{"location":"command/#environment-humidity","title":"Environment Humidity","text":"<pre><code>thermoo environment relativehumidity &lt;location&gt; [&lt;scale&gt;]\n</code></pre> <p>Returns the relative humidity of the location in some unit, as determined by the local environment conditions.</p> <p>Arguments: - <code>location</code>: A block position. - <code>scale</code>: An optional float. Multiplies the final relative humidity value so that commands can read it (the internal humidity value is stored as a 0-1 percentage). Defaults to <code>100.0</code>.     - For example: A scale of <code>10.0</code> and a relative humidity of <code>54.3%</code> would have the command result of <code>5</code> that can be stored in any of the normal targets of <code>execute store result</code>.</p> <p></p>"},{"location":"command/#temperature","title":"Temperature","text":""},{"location":"command/#get-temperature","title":"Get Temperature","text":"<pre><code>thermoo temperature get &lt;target&gt; [&lt;mode&gt;]\n</code></pre> <p>The <code>mode</code> can be one of the following:</p> <ul> <li><code>current</code>: Result is the current temperature of the <code>target</code> entity. This is the default behavior if not specified.</li> <li><code>max</code>: Result is the maximum temperature of the <code>target</code> entity.</li> <li><code>min</code>: Result is the minimum temperature of the <code>target</code> entity.</li> </ul> <p>If <code>mode</code> is set to <code>scale</code>, then an additional argument may be specified:</p> <pre><code>thermoo temperature get &lt;target&gt; scale [&lt;scale&gt;]\n</code></pre> <p>The <code>scale</code> argument is an integer multiplier of the temperature scale of the entity, which is a percentage of how cold/warm they are, where -100% is maximum cold, and +100% is maximum hot. The result is the floor of the temperature scale of the <code>target</code> entity multiplied by <code>scale</code>. If <code>scale</code> is not specified then it will default to 100.</p> <p>For example, a scale argument of <code>1000.0</code> and a temperature scale of <code>54.3%</code> would have the command result of <code>543</code> that can be stored in any of the normal targets of <code>execute store result</code>.</p>"},{"location":"command/#set-temperature","title":"Set Temperature","text":"<pre><code>thermoo temperature set &lt;targets&gt; &lt;amount&gt;\n</code></pre> <p>Sets the temperature of each entity specified by <code>targets</code> to the specified <code>amount</code>, clamping between the target's minimum and maximum temperature.</p> <p>Result: The sum of all amounts successfully added.</p>"},{"location":"command/#add-and-remove-temperature","title":"Add and Remove Temperature","text":"<pre><code>thermoo temperature (add|remove) &lt;targets&gt; &lt;amount&gt; [&lt;mode&gt;]\n</code></pre> <p>Adds or removes the specified <code>amount</code> of temperature to the <code>target</code>'s current temperature, clamped between their min and max temperature. The change is applied in the specified <code>mode</code>.</p> <p>The <code>mode</code> specified how and when thermal resistances should be applied. By default, if not specified it will be treated as <code>absolute</code>. The modes are as follows:</p> <ul> <li><code>absolute</code>: No resistance will be applied</li> <li><code>active</code>: Resistance will always be applied</li> <li><code>passive</code>: Only applies thermal resistance when the target is currently in the relevant temperature range. For example, cold resistance is only applied to targets that are cold; and heat resistance only to targets that are warm.</li> </ul> <p>Result: The sum of the amounts successfully added or removed before resistance is applied. If removing, the result will be negative.</p>"},{"location":"command/#soaking","title":"Soaking","text":"<p>A command to control the wet ticks of an entity.</p>"},{"location":"command/#get-wet-ticks","title":"Get Wet Ticks","text":"<pre><code>thermoo soaking get &lt;target&gt; [&lt;mode&gt;]\n</code></pre> <p>Gets the current, min, or max wet ticks value of the target.</p> <p>Arguments: - <code>target</code>: A single entity target. - <code>mode</code>: Optional enum, must be one of <code>current</code>, <code>min</code>, <code>max</code>, <code>scale</code>. Defaults to <code>current</code>.     - <code>current</code>: Returns the current wet tick value of the target.     - <code>min</code>: Returns the minimum allowed wet tick value of the target (always 0).     - <code>max</code>: Returns the maximum allowed wet tick value of the target. Controlled by the attribute <code>thermoo:max_soaking_tick_multiplier</code>.</p> <p>If the <code>mode</code> is scale, there is an additional argument:</p> <pre><code>thermoo soaking get &lt;target&gt; scale [&lt;scale&gt;]\n</code></pre> <p>Arguments: - <code>scale</code>: An optional float. Multiplies the final temperature value so that commands can read the decimal point, if desired. Defaults to <code>100.0</code>.     - For example: a scale of <code>100.0</code> and a soaking scale of <code>31.3%</code> would have the command return a result of <code>31</code> that can be stored in any of the normal targets of <code>execute store result</code>.</p>"},{"location":"command/#set-wet-ticks","title":"Set Wet Ticks","text":"<pre><code>thermoo soaking set &lt;target&gt; &lt;value&gt;\n</code></pre> <p>Sets the target's wet ticks to the specified value.</p> <p>Arguments: - <code>target</code>: A single entity target. - <code>value</code>: The integer value to set the target's wet ticks to.</p>"},{"location":"command/#add-and-remove-wet-ticks","title":"Add and Remove Wet Ticks","text":"<pre><code>thermoo soaking (add|remove) &lt;target&gt; &lt;value&gt;\n</code></pre> <p>Adds or removes the specified <code>value</code> of wet ticks to the <code>target</code>'s current wet ticks, clamped between their min and max wet ticks.</p> <p>Arguments: - <code>target</code>: A single entity target. - <code>value</code>: Integer, amount of wet ticks to add or remove. Cannot be negative.</p>"},{"location":"entity_attributes/","title":"Attributes","text":"<p>Thermoo defines several custom attribute types. For a full explanation of how attributes work in general see the Minecraft Wiki page on Attributes. This page will just document the attributes provided by Thermoo.</p>"},{"location":"entity_attributes/#attributes-list","title":"Attributes List","text":"Attribute Name Default Base Minimum ~ Maximum Description <code>thermoo:min_temperature</code> 0 0 ~ 8192 Sets the minimum allowed temperature value to <code>-140 * attribute_value</code>. <code>thermoo:max_temperature</code> 0 0 ~ 8192 Sets the maximum allowed temperature value to <code>140 * attribute_value</code>. <code>thermoo:max_soaking_tick_multiplier</code> 1 0 ~ 8192 Sets the maximum allowed wet ticks value to <code>600 * attribute_value</code>. <code>thermoo:frost_resistance</code> 0 -10 ~ 10 Reduces the impact of negative temperature changes from non-environmental sources. <code>thermoo:heat_resistance</code> 0 -10 ~ 10 Reduces the impact of positive temperature changes from non-environmental sources. <code>thermoo:environment_frost_resistance</code> 0 -1 ~ 1 Positive values provide a random chance of \"dodging\" a negative temperature change from an environmental source. Negative values provide a chance of doubling it instead. <code>thermoo:environment_heat_resistance</code> 0 -1 ~ 1 Positive values provide a random chance of \"dodging\" a positive temperature change from an environmental source. Negative values provide a chance of doubling it instead. <p>Info</p> <p>In Minecraft versions 1.21.1 and earlier, all attribute IDs are prefixed with <code>generic.</code> For example, <code>thermoo:generic.frost_resistance</code>.</p>"},{"location":"entity_attributes/#setting-the-base-value-mods","title":"Setting the Base Value (mods)","text":"<p>Mods are able to use an event listener to set the base value of the Thermoo attributes. The base value provided by this event is stored as a temporary <code>add_value</code> attribute modifier with the ID <code>thermoo:base_{attributeName}</code> (for example, <code>thermoo:base_frost_resistance</code>).</p>"},{"location":"entity_attributes/#example","title":"Example","text":"JavaKotlin <pre><code>static void initialize() {\n    ThermooAttributes.baseValueEvent(ThermooAttributes.FROST_RESISTANCE)\n            .register((entity, baseValue) -&gt; {\n                return entity.getType() == EntityType.PLAYER\n                        ? baseValue + 45\n                        : baseValue;\n            });\n}\n</code></pre> <pre><code>fun initialize() {\n    ThermooAttributes.baseValueEvent(ThermooAttributes.FROST_RESISTANCE)\n        .register { entity, baseValue -&gt; \n            return@register if (entity.type === EntityType.PLAYER) baseValue + 45 else baseValue\n        }\n}\n</code></pre>"},{"location":"setup/","title":"Setup","text":"<p>Ensure you have the correct version of Thermoo installed for your Minecraft version. Usually, each major version of Thermoo corresponds to a Minecraft version with breaking changes.</p> Minecraft Version Range Corresponding Thermoo versions 1.21.9-10 8.x 1.21.6-8 7.x 1.21.5 6.x 1.21.2-1.21.4 5.x 1.21-1.21.1 4.x 1.20.5-1.20.6 Skipped 1.20.2-1.20.4 3.x 1.20-1.20.1 1.6-2.x 1.19.4 1.5.x 1.19.2 1.3.1-1.4 <p></p>"},{"location":"setup/#mods","title":"Mods","text":"<p>Add the following to your gradle build script:</p> <code>build.gradle</code><code>build.gradle.kts</code> <pre><code>repositories {\n    maven {\n        url \"https://jitpack.io/\"\n    }\n// Needed as Thermoo uses Cardinal Components\n    maven {\n        name = \"Ladysnake Mods\"\n        url = \"https://maven.ladysnake.org/releases\"\n    }\n}\n\ndependencies {\n    // Your other dependencies\n    // get version from Jitpack: https://jitpack.io/#TheDeathlyCow/thermoo\n    modImplementation \"com.github.thedeathlycow:thermoo:&lt;VERSION&gt;\"\n}\n</code></pre> <pre><code>repositories {\n    maven {\n        url = uri(\"https://jitpack.io/\")\n    }\n    // Needed as Thermoo uses Cardinal Components\n    maven {\n        name = \"Ladysnake Mods\"\n        url = \"https://maven.ladysnake.org/releases\"\n    }\n}\n\ndependencies {\n    // Your other dependencies\n    // get version from Jitpack: https://jitpack.io/#TheDeathlyCow/thermoo\n    modImplementation(\"com.github.thedeathlycow:thermoo:&lt;VERSION&gt;\")\n}\n</code></pre> <p>Warning</p> <p>You may embed Thermoo in your mod through the <code>include</code> directive or other jar-in-jar mechanisms, provided that you follow the conditions of Thermoo's LGPL-3.0 license. This includes, but is not limited to: making your mod open source, and providing the same license in your mod (or GPL-3.0). See the full license text for all terms.</p>"},{"location":"setup/#datapacks","title":"Datapacks","text":"<p>You must first install either the Fabric or Quilt mod loaders to use Thermoo. Thermoo may run on the NeoForge platform when using Sinytra Connector, however this usage is not supported. Support queries and issues from users not using Fabric or Quilt will be closed/ignored.</p> <p>Ensure Thermoo is installed in your <code>mods</code> directory, along with its dependencies Fabric API ( or QSL if using Quilt) and Cardinal Components API.</p>"},{"location":"datapacks/environment_component_type/","title":"Environment Component Types","text":"<p>Environment Component Types are a special set of Components (like those found on <code>ItemStack</code>s) that are reserved for the parameters of the environment. </p>"},{"location":"datapacks/environment_component_type/#component-formats","title":"Component Formats","text":"<ul> <li><code>thermoo:temperature</code></li> <li><code>thermoo:relative_humidity</code></li> </ul>"},{"location":"datapacks/environment_component_type/#temperature","title":"Temperature","text":"<ul> <li><code>{}</code> components: Parent tag.<ul> <li><code>{}</code> thermoo:temperature: A Temperature Record.</li> </ul> </li> </ul>"},{"location":"datapacks/environment_component_type/#relative-humidity","title":"Relative Humidity","text":"<ul> <li><code>{}</code> components: Parent tag.<ul> <li><code>D</code> thermoo:relative_humidity: A double value between 0 and 1 (inclusive).</li> </ul> </li> </ul>"},{"location":"datapacks/environment_component_type/#defining-custom-component-types","title":"Defining Custom Component Types","text":"<p>Creating a new environment component type is just like creating a new item component type, except that you must register it to the registry <code>ThermooRegistries.ENVIRONMENT_COMPONENT_TYPE</code>. All component type objects should be immutable, and any operations on them should return a new instance. For this reason, it is recommended to use <code>record</code> (in Java) or <code>data</code> (in Kotlin) classes to create your components.</p> <p>You will need to register a <code>Codec</code> for your component type. The Fabric docs have a useful page on the subject if you are unfamiliar: https://docs.fabricmc.net/develop/codecs </p>"},{"location":"datapacks/environment_component_type/#example","title":"Example","text":"<p>A dew point component type.</p> JavaKotlin <pre><code>public record DewPointComponent(\n        TemperatureRecord dewPoint\n)  {\n    public static final Codec&lt;DewPointComponent&gt; CODEC = RecordCodecBuilder.create(\n            instance -&gt; instance.group(\n                    TemperatureRecord.CODEC\n                            .fieldOf(\"dew_point\")\n                            .forGetter(DewPointComponent::dewPoint)\n            ).apply(instance, DewPointComponent::new)\n    );\n\n    public static final DewPointComponent DEFAULT = new DewPointComponent(new TemperatureRecord(20));\n\n    // usually this would go in its own EnvironmentComponentTypes-like class, but kept here as an example\n    public static final DataComponentType&lt;DewPointComponent&gt; COMPONENT = DataComponentType.builder()\n            .persistent(CODEC)\n            .build();\n\n    public static void initialize() {\n        Registry.register(\n                ThermooRegistries.ENVIRONMENT_COMPONENT_TYPE,\n                ResourceLocation.fromNamespaceAndPath(\"example\", \"dew_point\"),\n                COMPONENT\n        );\n    }\n}\n</code></pre> <pre><code>data class DewPointComponent(\n    val dewPoint: TemperatureRecord \n) {\n    companion object {\n        val CODEC: Codec&lt;DewPointComponent&gt; = RecordCodecBuilder.create { instance -&gt;\n            instance.group(\n                TemperatureRecord.CODEC\n                    .fieldOf(\"dew_point\")\n                    .forGetter(DewPointComponent::dewPoint)\n            ).apply(instance, ::DewPointComponent)\n        }\n\n        val DEFAULT: DewPointComponent = DewPointComponent(20.C)\n\n        // usually this would go in its own EnvironmentComponentTypes-like class, but kept here as an example\n        val COMPONENT: DataComponentType&lt;DewPointComponent&gt; = DataComponentType.builder()\n                .persistent(CODEC)\n                .build()\n\n        fun initialize() {\n            Register.register(\n                ThermooRegistries.ENVIRONMENT_COMPONENT_TYPE,\n                ResourceLocation.fromNamespaceAndPath(\"example\", \"dew_point\"),\n                COMPONENT\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"datapacks/environment_definition/","title":"Environment Definition","text":"<p>The Environment Definition is a datapack registry that defines the environment parameters for a set of biomes. When you define an entry in this registry, Thermoo will automatically pick it up and apply its environment parameters to players in the biomes that you define for it and pass them to mods via the Tick Events. Entries in this registry is not reloadable, you must restart the world to get update, add, or remove entries. It has a registry path of <code>thermoo/environment</code>.</p> <p>For mods, you should place your files in <code>src/main/resources/data/[modid]/thermoo/environment/</code> and for datapacks, they should instead be placed in <code>[world]/datapacks/your_datapack/data/[namespace]/thermoo/environment/</code>.</p> <p>Tip</p> <p>You can generate Environment definitions using Misode's Datapack Generator at: https://misode.github.io/thermoo/environment/</p>"},{"location":"datapacks/environment_definition/#format","title":"Format","text":"<ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> <code>[]</code> biomes: Identifier of a biome, a list of biome IDs, or a <code>#</code>-prefixed biome tag ID, for example <code>minecraft:plains</code> or <code>#c:is_hot/overworld</code>. Biomes that this environment provides for.</li> <li><code>\"</code> <code>[]</code> exclude_biomes: Optional, Identifier of a biome, a list of biome IDs, or a <code>#</code>-prefixed biome tag ID, for example <code>minecraft:plains</code> or <code>#c:is_hot/overworld</code>. Biomes that this environment does not provide for. Defaults to an empty list if not specified.</li> <li><code>\"</code> <code>{}</code> provider: An Environment Provider ID, or in-line defined Environment Provider.</li> <li><code>I</code> priority: Optional integer. Determines the priority for which this environment should be applied to a biome. Environments with a HIGHER priority will be applied FIRST, and environments with a LOWER priority will be applied LAST. Environments with the same priority may be applied in any order. Defaults to <code>1000</code>.</li> </ul> </li> </ul> <p>The environment will provide for all biomes that are included in <code>biomes</code> and not included in <code>exclude_biomes</code>.</p>"},{"location":"datapacks/environment_definition/#examples","title":"Examples","text":"<p>Using an inline provider:</p> data/example/thermoo/environment/snowy_climate.json<pre><code>{\n    \"biomes\": \"#c:is_snowy\",\n    \"exclude_biomes\": \"#c:is_icy\",\n    \"provider\": {\n        \"type\": \"thermoo:constant\",\n        \"components\": {\n            \"type\": \"thermoo:constant\",\n            \"components\": {\n                \"thermoo:temperature\": {\n                    \"value\": 263.15,\n                    \"unit\": \"kelvin\"\n                },\n                \"thermoo:relative_humidity\": 0.75\n            }\n        }\n    }\n}\n</code></pre> <p>Using a provider ID: data/example/thermoo/environment/desert_climate.json<pre><code>{\n    \"biomes\": [\n        \"minecraft:desert\"\n    ],\n    \"provider\": \"example:desert_climate_provider\"\n}\n</code></pre></p> data/example/thermoo/environment_provider/desert_climate_provider.json<pre><code>{\n    \"type\": \"thermoo:constant\",\n    \"components\": {\n        \"thermoo:temperature\": 35.0,\n        \"thermoo:relative_humidity\": 0.15\n    }\n}\n</code></pre>"},{"location":"datapacks/environment_provider_definition/","title":"Environment Provider Definition","text":"<p>The Environment Provider is a datapack registry that is used by the Environment Registry to actually do the job of providing the environment parameters for a world position. It has a registry path of <code>thermoo/environment_provider</code>.</p> <p>For mods, you should place your files in <code>src/main/resources/data/[modid]/thermoo/environment_provider/</code> and for datapacks, they should instead be placed in <code>[world]/datapacks/your_datapack/data/[namespace]/thermoo/environment_provider/</code>.</p> <p>Environment Providers work as a tree-like structure that has two categories of types: branching types that choose a child provider based on some world condition, and leaf types that can provide the environment components directly, or modify the current set in the evaluation tree.</p> <p>Tip</p> <p>You can generate Environment Provider definitions using Misode's Datapack Generator at: https://misode.github.io/thermoo/environment_provider/</p>"},{"location":"datapacks/environment_provider_definition/#environment-provider-formats","title":"Environment Provider Formats","text":"<ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: The type of the environment provider. See the list below for the format of each type. </li> <li><code>...</code>: Based on the value of type. </li> </ul> </li> </ul> <p>Environment Provider Types:</p> <ul> <li>Environment Provider Definition</li> <li>Environment Provider Formats<ul> <li>Constant</li> <li>Temperate Seasonal</li> <li>Tropical Seasonal</li> <li>Light Threshold</li> <li>Weather State</li> <li>Precipitation Type</li> <li>Temperature Shift</li> <li>Modify</li> </ul> </li> <li>Examples</li> <li>Custom Environment Provider Types<ul> <li>Example</li> </ul> </li> </ul> <p>Just to be clear on how type delegation works, here is a complete example of an environment provider using the <code>thermoo:constant</code> type.</p> <pre><code>{\n    \"type\": \"thermoo:constant\",\n    \"components\": {\n        \"thermoo:temperature\": 35.0\n    }\n}\n</code></pre>"},{"location":"datapacks/environment_provider_definition/#constant","title":"Constant","text":"<p>The primary leaf provider type that provides a constant set of the components.</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: Must be <code>thermoo:constant</code>.</li> <li><code>{}</code> components: A component map containing pairs of environment component ID keys to the component value. The entries in this map must be Environment Components.</li> </ul> </li> </ul> <p>Info</p> <p>If a component ID specified by an instance of this provider type is already defined in the current evaluation tree during lookup, then this will overwrite it. If a component ID is already defined in the evaluation tree, but not specified by an instance of this provider, then it will be left alone. So you can have multiple <code>thermoo:constant</code> providers in the same provider tree - see <code>thermoo:modify</code> for one way of doing this.</p>"},{"location":"datapacks/environment_provider_definition/#temperate-seasonal","title":"Temperate Seasonal","text":"<p>A branch provider that chooses a child provider based on the current Temperate Season (Spring, Summer, Autumn, or Winter). This also works in biomes with Tropical Seasons.</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: Must be <code>thermoo:seasonal/temperate</code>.</li> <li><code>\"</code> fallback_season: Optional, the key of an entry in the seasons compound to use if no temperate season exists at the queried world position (usually because a seasons mod like Fabric Seasons is not installed). If there is no season and the fallback season is empty, then this provider will return empty.</li> <li><code>{}</code> seasons: A map of Temperate Season IDs to Environment Providers. Must contain at least one entry.<ul> <li><code>\"</code> <code>{}</code> spring: Optional, the Environment Provider ID or in-line Environment Provider to use when the current season is Spring.</li> <li><code>\"</code> <code>{}</code> summer: Optional, the Environment Provider ID or in-line Environment Provider to use when the current season is Summer.</li> <li><code>\"</code> <code>{}</code> autumn: Optional, the Environment Provider ID or in-line Environment Provider to use when the current season is Autumn.</li> <li><code>\"</code> <code>{}</code> winter: Optional, the Environment Provider ID or in-line Environment Provider to use when the current season is Winter.</li> </ul> </li> </ul> </li> </ul> <p>Warning</p> <p>In order for a season to be chosen, you will need to install both a Seasons mod and a compatibility patch mod. Thermoo Patches is such a compatibility patch mod which works for Fabric Seasons, Serene Seasons, and Simple Seasons. If no season mod is installed, then the specified <code>fallback_season</code> will be used. </p>"},{"location":"datapacks/environment_provider_definition/#tropical-seasonal","title":"Tropical Seasonal","text":"<p>A branch provider that chooses a child provider based on the current Tropical Season (Wet or Dry).</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: Must be <code>thermoo:seasonal/tropical</code>.</li> <li><code>\"</code> fallback_season: Optional, a key in the seasons map to use if no tropical season exists at the queried world position (usually because a seasons mod like Fabric Seasons is not installed, or because the queried world position is not in a tropical biome). If there is no season and the fallback season is empty, then this provider will return empty.</li> <li><code>{}</code> seasons: A map of Tropical Season IDs to Environment Providers. Must contain at least one entry.<ul> <li><code>\"</code> <code>{}</code> wet: Optional, the Environment Provider ID or in-line Environment Provider to use when the queried world position is currently in the Wet Season.</li> <li><code>\"</code> <code>{}</code> dry: Optional, the Environment Provider ID or in-line Environment Provider to use when the queried world position is currently in the Dry Season.</li> </ul> </li> </ul> </li> </ul> <p>Warning</p> <p>In order for a season to be chosen, you will need to install both a Seasons mod and a compatibility patch mod, and the Seasons mod must have support for Tropical Seasons. Thermoo Patches is such a compatibility patch mod which works for Fabric Seasons, Serene Seasons, and Simple Seasons. If no season mod is installed, then the specified <code>fallback_season</code> will be used.</p>"},{"location":"datapacks/environment_provider_definition/#light-threshold","title":"Light Threshold","text":"<p>A branch provider that chooses a child provider if the light level at the queried world position is at or above some threshold.</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: Must be <code>thermoo:light_threshold</code>.</li> <li><code>\"</code> light_type: Optional string. One of <code>block</code> or <code>sky</code>. Applies a filter to the layer of light used for calculating the threshold value. If not specified, then the light level will be the combined light level of <code>max(block_light, internal_sky_light)</code>.</li> <li><code>T/F</code> apply_ambient_darkness: Optional boolean. If the light_type is <code>sky</code>, then will subtract off an \"ambient darkness\" value from the raw skylight value at the queried world position. This is a value used by the game to determine the final \"internal\" skylight level when its night or stormy. No effect if light_type is not <code>sky</code>. Defaults to <code>true</code>.</li> <li><code>I</code> threshold: Integer, the threshold light level used to choose the provider to use after the above filters to use. Must be in the range <code>[0, 15]</code>.</li> <li><code>\"</code> <code>{}</code> above: The Environment Provider ID or in-line Environment Provider to use when the light level at the queried world position is at or above the threshold value.</li> <li><code>\"</code> <code>{}</code> below: The Environment Provider ID or in-line Environment Provider to use when the light level at the queried world position is strictly below the threshold value.</li> </ul> </li> </ul>"},{"location":"datapacks/environment_provider_definition/#weather-state","title":"Weather State","text":"<p>A branch provider that chooses a child provider based on the world's current global weather state. To choose a provider based on a biome's particular precipitation type (snow, rain, cloudy), use Precipitation Type.</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: Must be <code>thermoo:weather_state</code>.</li> <li><code>\"</code> <code>{}</code> clear: Optional, the Environment Provider ID or in-line Environment Provider to use when the current weather state is clear.</li> <li><code>\"</code> <code>{}</code> rain: Optional, the Environment Provider ID or in-line Environment Provider to use when the current weather state is rainy, but not thundering. Applies regardless of the queried world position's biome precipitation type.</li> <li><code>\"</code> <code>{}</code> thunder: Optional, the Environment Provider ID or in-line Environment Provider to use when the current weather state is thundering. Applies regardless of the queried world position's biome precipitation type.</li> </ul> </li> </ul>"},{"location":"datapacks/environment_provider_definition/#precipitation-type","title":"Precipitation Type","text":"<p>A branch provider that chooses a child provider based on a biome's precipitation type. This is always the same whether it is raining or not. To choose a provider based on the world's current weather state, use Weather State. </p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: Must be <code>thermoo:precipitation_type</code>.</li> <li><code>{}</code> precipitation_type: Map of precipitation type to child provider. Must have at least one entry.<ul> <li><code>\"</code> <code>{}</code> none: Optional, the Environment Provider ID or in-line Environment Provider to use in biomes where it never rains.</li> <li><code>\"</code> <code>{}</code> rain: Optional, the Environment Provider ID or in-line Environment Provider to use in biomes where it can rain but not snow.</li> <li><code>\"</code> <code>{}</code> snow: Optional, the Environment Provider ID or in-line Environment Provider to use in biomes where it can snow.</li> </ul> </li> </ul> </li> </ul>"},{"location":"datapacks/environment_provider_definition/#temperature-shift","title":"Temperature Shift","text":"<p>A leaf provider that adds a temperature shift to the current value of the <code>thermoo:temperature</code> component in the evaluation tree. This is only recommended to be used as an entry in the <code>modifiers</code> list of the <code>thermoo:modify</code> environment provider type.</p> <p>If there is not an instance of the <code>thermoo:temperature</code> component in the current evaluation tree, then this provider will not do anything and log a warning.</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>D</code> <code>{}</code> shift: A temperature record that is added to the current instance of the <code>thermoo:temperature</code> component in the evaluation tree. It is recommended to use the absolute units (Kelvin or Rankine) for this record, but not mandatory.</li> </ul> </li> </ul>"},{"location":"datapacks/environment_provider_definition/#modify","title":"Modify","text":"<p>A branch provider that sets a base provider, then applies a list of providers as \"modifiers\" to it in order.</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: Must be <code>thermoo:modify</code>. </li> <li><code>\"</code> <code>[]</code> modifiers: Identifier of an Environment Provider, a list of environment provider IDs, or a <code>#</code>-prefixed environment provider tag ID, for example <code>example:night_temperature_shift</code> or <code>#example:temperature_modifiers</code>. Applies a series of providers to the base in the order specified as \"modifiers\".</li> <li><code>\"</code> <code>{}</code> base: An Environment Provider ID, or in-line defined Environment Provider.</li> </ul> </li> </ul>"},{"location":"datapacks/environment_provider_definition/#examples","title":"Examples","text":"<p>The Thermoo Test Mod provides examples for all environment provider types, but here are a few other ones.</p> <p>Provide a low temperature in places it is currently snowing.</p> <pre><code>{\n    \"type\": \"thermoo:weather_state\",\n    \"rain\": {\n        \"type\": \"thermoo:precipitation_type\",\n        \"precipitation_type\": {\n            \"snow\": {\n                \"type\": \"thermoo:constant\",\n                \"components\": {\n                    \"thermoo:temperature\": -10.0\n                }\n            }\n        }\n    },\n    \"thunder\": {\n        \"type\": \"thermoo:precipitation_type\",\n        \"precipitation_type\": {\n            \"snow\": {\n                \"type\": \"thermoo:constant\",\n                \"components\": {\n                    \"thermoo:temperature\": -10.0\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Make an area warmer when exposed to sunlight.</p> example:area_temperature<pre><code>{\n    \"type\": \"thermoo:modify\",\n    \"modifiers\": [\n        \"example:sun_light_warmth\"\n    ],\n    \"base\": {\n        \"type\": \"thermoo:constant\",\n        \"components\": {\n            \"thermoo:temperature\": 20.0\n        }\n    }\n}\n</code></pre> example:sun_light_warmth<pre><code>{\n    \"type\": \"thermoo:light_threshold\",\n    \"light_type\": \"sky\",\n    \"threshold\": 15,\n    \"above\": {\n        \"type\": \"thermoo:temperature_shift\",\n        \"shift\": {\n            \"value\": 18.0,\n            \"unit\": \"rankine\"\n        }\n    },\n    \"below\": \"example:empty\"\n}\n</code></pre> example:empty<pre><code>{\n    \"type\": \"thermoo:constant\",\n    \"components\": {}\n}\n</code></pre>"},{"location":"datapacks/environment_provider_definition/#custom-environment-provider-types","title":"Custom Environment Provider Types","text":"<p>Mods may define their own environment provider types. To do this, create a class which implements <code>EnvironmentProvider</code> and write your logic for it. This class should be immutable, so it is highly recommended to use <code>record</code> classes (in Java) or <code>data</code> classes (in Kotlin) for this purpose.</p> <p>You will then need to create a <code>MapCodec</code> to be assigned to an <code>EnvironmentProviderType</code> which is then registered to <code>ThermooRegistries.ENVIRONMENT_PROVIDER_TYPE</code>.</p>"},{"location":"datapacks/environment_provider_definition/#example","title":"Example","text":"<p>A leaf provider type that provides a constant temperature value.</p> JavaKotlin <pre><code>public record ConstantTemperatureEnvironmentProvider(\n        TemperatureRecord temperature\n) implements EnvironmentProvider {\n    public static final MapCodec&lt;ConstantTemperatureEnvironmentProvider&gt; CODEC = RecordCodecBuilder.mapCodec(\n            instance -&gt; instance.group(\n                    TemperatureRecord.CODEC\n                            .fieldOf(\"temperature\")\n                            .forGetter(ConstantTemperatureEnvironmentProvider::temperature)\n            ).apply(instance, ConstantTemperatureEnvironmentProvider::new)\n    );\n\n    // usually would go in its own EnvironmentProviderTypes-like class, but kept here for simplicity. \n    public static final EnvironmentProviderType&lt;ConstantTemperatureEnvironmentProvider&gt; TYPE = new EnvironmentProviderType(CODEC);\n\n    @Override\n    public void buildCurrentComponents(World world, BlockPos pos, RegistryEntry&lt;Biome&gt; biome, ComponentMap.Builder builder) {\n        builder.add(EnvironmentComponentTypes.TEMPERATURE, this.temperature);\n    }\n\n    @Override\n    public EnvironmentProviderType&lt;ConstantTemperatureEnvironmentProvider&gt; getType() {\n        return TYPE;\n    }\n\n    public static void initialize() {\n        Registry.register(\n                ThermooRegistries.ENVIRONMENT_PROVIDER_TYPE,\n                Identifier.of(\"example\", \"constant_temperature\"),\n                TYPE\n        );\n    }\n}\n</code></pre> <pre><code>data class ConstantTemperatureEnvironmentProvider(\n        val temperature: TemperatureRecord\n): EnvironmentProvider {\n\n    companion object {\n        val CODEC: MapCodec&lt;ConstantTemperatureEnvironmentProvider&gt; = RecordCodecBuilder.mapCodec { instance -&gt;\n            instance.group(\n                TemperatureRecord.CODEC\n                    .fieldOf(\"temperature\")\n                    .forGetter(ConstantTemperatureEnvironmentProvider::temperature)\n            ).apply(instance, ::ConstantTemperatureEnvironmentProvider)\n        }\n\n        // usually would go in its own EnvironmentProviderTypes-like class, but kept here for simplicity. \n        val TYPE: EnvironmentProviderType&lt;ConstantTemperatureEnvironmentProvider&gt; = EnvironmentProviderType(CODEC)\n\n        fun initialize() {\n            Registry.register(\n                ThermooRegistries.ENVIRONMENT_PROVIDER_TYPE,\n                Identifier.of(\"example\", \"constant_temperature\"),\n                TYPE\n            )\n        }\n    }\n\n    override fun buildCurrentComponents(\n        world: World,\n        pos: BlockPos,\n        biome: RegistryEntry&lt;Biome&gt;,\n        builder: ComponentMap.Builder\n    ) {\n        builder.add(EnvironmentComponentTypes.TEMPERATURE, this.temperature)\n    }\n\n    override fun getType(): EnvironmentProviderType&lt;ConstantTemperatureEnvironmentProvider&gt; {\n        return TYPE\n    }\n}\n</code></pre>"},{"location":"datapacks/item_attribute_modifier_definition/","title":"Item Attribute Modifiers (Removed in 1.21+)","text":"<p>Item attribute modifiers allow datapacks to modify the default attributes of items easily. This is particularly useful for mod pack developers who want to add attributes to non-Thermoo based modded armors. It allows for attributes to be applied to items based on both tags and item IDs.</p> <p>Warning</p> <p>This feature was removed in Thermoo 4.0 (for 1.21) due to the massive changes to items. In Thermoo 4.x for Minecraft 1.21.1, mods can use the item attribute modifier event. For datapacks and modpacks, I would recommend checking out the Default Components mod.</p>"},{"location":"datapacks/item_attribute_modifier_definition/#example-json-file","title":"Example JSON file","text":"<p>JSON files should be placed in <code>data/&lt;namespace&gt;/thermoo/item_attribute_modifier/&lt;path&gt;.json</code>.</p> <pre><code>{\n    \"attribute\": \"thermoo:generic.heat_resistance\",\n    \"modifier\": {\n        \"uuid\": \"413a10a0-bf0b-47db-a9a9-2eb3dda3bbaf\",\n        \"name\": \"Test\",\n        \"value\": -1.0,\n        // one of: \"addition\", \"multiply_base\", \"multiply_total\"\n        // note, in 1.20.1 it must be all caps \n        \"operation\": \"addition\"\n    },\n    \"item\": {\n        \"items\": [\n            \"minecraft:diamond_helmet\",\n            \"minecraft:iron_helmet\",\n            \"minecraft:leather_helmet\"\n        ],\n        // you can also use a tag here\n        \"tag\": \"example:all_helmets\"\n    },\n    // replace with any equipment slot, like chest, legs, feet, mainhand, offhand\n    // note, in 1.20.1 it must be all caps \n    \"slot\": \"head\",\n    // boolean value, false by default. See below for an explanation.\n    \"require_preferred_slot\": false\n}\n</code></pre> <p>The <code>require_preferred_slot</code> field only applies the modifier if the given slot is the item's preferred slot. For example: if the item is a helmet, then it only applies to the head slot. If this is true and the item does not have a preferred slot, then the preferred slot will fall back to the main hand. This is useful when using tags that overlap different types of equipment across multiple item attribute modifiers, but you only want to apply the modifier to one slot. </p>"},{"location":"datapacks/loot_condition/","title":"Loot Conditions","text":"<p>Thermoo defines some custom types of loot item conditions (also known as predicates). There is one for temperature, and one for wet ticks.</p> <p>Tip</p> <p>You can generate Predicate definitions using Misode's Datapack Generator at: https://misode.github.io/thermoo/predicate/</p>"},{"location":"datapacks/loot_condition/#temperature-loot-condition","title":"Temperature Loot Condition","text":"<ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> condition: Must be <code>thermoo:temperature</code></li> <li><code>I</code> <code>{}</code> value: Integer range. Either an exact temperature value or a temperature value range compound with <code>I</code> min and <code>I</code> max keys.</li> <li><code>D</code> <code>{}</code> scale: Integer range. Either an exact temperature scale or a temperature scale range compound with <code>D</code> min and <code>D</code> max keys.</li> </ul> </li> </ul> <p>Requires a 'this' entity loot context variable.</p> <p>If the 'this' entity is not temperature aware, returns false.</p> <p>Both scale and value must pass to return true.</p>"},{"location":"datapacks/loot_condition/#soaked-loot-condition","title":"Soaked loot condition","text":"<ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> condition: Must be <code>thermoo:soaked</code></li> <li><code>I</code> <code>{}</code> value: Integer range. Either an exact soaked value or a soaked value range compound with <code>I</code> min and <code>I</code> max keys.</li> <li><code>D</code> <code>{}</code> scale: Integer range. Either an exact soaked scale or a soaked scale range compound with <code>D</code> min and <code>D</code> max keys.</li> </ul> </li> </ul> <p>Requires a 'this' entity loot context variable.</p> <p>If the 'this' entity is not soakable, returns false.</p> <p>Both scale and value must pass to return true.</p>"},{"location":"datapacks/loot_condition/#examples","title":"Examples","text":"<p>Is cold predicate: <pre><code>{\n    \"condition\": \"thermoo:temperature\",\n    \"value\": {\n        \"max\": 0\n    }\n}\n</code></pre></p> <p>Is warm predicate: <pre><code>{\n    \"condition\": \"thermoo:temperature\",\n    \"value\": {\n        \"min\": 0\n    }\n}\n</code></pre></p> <p>Is max temperature predicate: <pre><code>{\n    \"condition\": \"thermoo:temperature\",\n    \"scale\": 1.0\n}\n</code></pre></p>"},{"location":"datapacks/tags/","title":"Tags","text":"<p>Thermoo provides a few builtin datapack tags that you may find useful.</p>"},{"location":"datapacks/tags/#entity-type-tags","title":"Entity type tags","text":"<p>Thermoo comes with a number of important entity type tags that control which entities can be affected by temperature. Thermoo will only define the names of the tags and how they are used - it will not populate them with any entity types. You will have to decide which entity types these tags are applicable to your needs. The tags are as follows:</p> <ul> <li><code>#thermoo:cold_immune</code>: Entities belonging to this tag cannot be frozen.</li> <li><code>#thermoo:heat_immune</code>: Entities belonging to this tag cannot be heated.</li> <li><code>#thermoo:benefits_from_cold</code>: Entities belonging to this tag benefit from the effects of cold. If the type is also included in <code>#thermoo:cold_immune</code>, this tag will override their cold immunity and ensure that they are actually capable of freezing.</li> <li><code>#thermoo:benefits_from_heat</code>: Entities belonging to this tag benefit from the effects of heat. If the type is also included in <code>#thermoo:heat_immune</code>, this tag will override their cold immunity and ensure that they are actually capable of heating.</li> </ul>"},{"location":"datapacks/tags/#conventional-consumable-item-tags","title":"Conventional Consumable Item Tags","text":"<p>These are custom conventional tags in Thermoo. They provide no functionality in Thermoo as-is, they are just meant to provide a standardized way of handling consumable items within the context of the Thermoo Library.</p> <ul> <li><code>#thermoo:consumable/cooling</code>: Foods that are cold</li> <li><code>#thermoo:consumable/warming</code>: Foods that are warm</li> </ul>"},{"location":"datapacks/temperature_effect_definition/","title":"Temperature Effect Definition","text":"<p>Temperature effects are a data-driven way of adding effects to temperature under certain conditions. Some examples include damage, status effects, and attribute modifiers. They are used by both mods and datapacks. For mods, you should place your files in <code>src/main/resources/data/[modid]/thermoo/temperature_effect</code> and for datapacks, they should instead be placed in <code>[world]/datapacks/your_datapack/data/[namespace]/thermoo/temperature_effect</code>.</p> <p>Info</p> <p>For 1.20.4 and below: the path of temperature effects was <code>thermoo/temperature_effects</code> in these versions, but it has since been updated to a singular form to reflect similar changes made to the vanilla game.</p> <p>Tip</p> <p>You can generate Temperature Effect definitions using Misode's Datapack Generator at: https://misode.github.io/thermoo/temperature_effect/</p>"},{"location":"datapacks/temperature_effect_definition/#json-format","title":"JSON format","text":"<p>Temperature effects come in the following JSON format:</p> <ul> <li><code>{}</code>: The root tag<ul> <li><code>\"</code> type: Resource location/Identifier of the type (see below). By default, Thermoo allows for <code>thermoo:empty</code>, <code>thermoo:status_effect</code>, <code>thermoo:attribute_modifier</code>, <code>thermoo:scaling_attribute_modifier</code>, <code>thermoo:damage</code>, <code>thermoo:function</code>, or <code>thermoo:sequence</code></li> <li><code>{}</code> entity: A Datapack Predicate. Optional: if not specified then evaluates to <code>true</code>.</li> <li><code>\"</code> <code>[]</code> entity_type: Identifier of an entity type, a list of entity type IDs, or a <code>#</code>-prefixed entity type tag ID, for example <code>minecraft:player</code> or <code>#minecraft:freeze_hurts_extra_types</code>. Only ticks the effect for those entity types. Is generally more efficient than using a predicate, as the effect won't be ticked at all for other types. Optional: Defaults to an empty list, which ticks the effect for all entity types.</li> <li><code>D</code> <code>{}</code> temperature_scale_range: A double range that specifies at what temperature scales the effect should apply on. Note that the scale is a percentage from -1 to +1, not their actual temperature value. Use an object with <code>D</code> min and <code>D</code> max to check for number ranges. Optional: will accept any temperature scale if not specified.</li> <li><code>{}</code> config: A JSON compound. Its form is dependent on the value of <code>type</code> (see below for details).</li> <li><code>I</code> loading_priority: An integer. Allows load-order independent overriding of temperature effects from other mods/datapacks, to support the creation of compatibility patches. An effect of a higher priority will always load before an effect at the same resource location with a lower priority. Optional: defaults to 0.</li> <li>Temperature effects also support the Fabric Resource Conditions API. See: https://github.com/FabricMC/fabric/pull/1656</li> </ul> </li> </ul>"},{"location":"datapacks/temperature_effect_definition/#temperature-effect-types","title":"Temperature Effect Types","text":""},{"location":"datapacks/temperature_effect_definition/#empty","title":"Empty","text":"<p>The empty temperature effect, as the name implies, does nothing. It is primarily useful for overriding/deleting temperature effects from lower-priority mods or datapacks.</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format","title":"Config JSON format","text":"<p>If the <code>type</code> is <code>thermoo:empty</code>, the <code>config</code> can be left as an empty object. Note that it must still be specified!</p>"},{"location":"datapacks/temperature_effect_definition/#mob-effect","title":"Mob Effect","text":"<p>The mob effect temperature effect applies the specified mob effect(s) (aka status effects or potion effects) to the affected entity when they match the predicate.</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format_1","title":"Config JSON format","text":"<p>If the type is <code>thermoo:mob_effect</code> or <code>thermoo:status_effect</code>, the <code>config</code> has the following format:</p> <ul> <li><code>[]</code> effects: A list of effects, whose entries have the following format:<ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> type: A resource location/identifier of the mob effect type. For example, <code>minecraft:speed</code>.</li> <li><code>I</code> duration: Integer. The time (in ticks) the mob effect will be applied for. Optional: defaults to 20 if not specified.</li> <li><code>I</code> amplifier: Integer. The amplifier of the mob effect.</li> </ul> </li> </ul> </li> </ul>"},{"location":"datapacks/temperature_effect_definition/#attribute-modifier","title":"Attribute Modifier","text":"<p>The attribute modifier applies a fixed attribute modifier to the affected entity</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format_2","title":"Config JSON format","text":"<p>If the type is <code>thermoo:attribute_modifier</code>, the <code>config</code> has the following format:</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>F</code> value: Float, the value of the modifier.</li> <li><code>\"</code> attribute_type: Resource Location/Identifier of the attribute type to apply the modifier to.</li> <li><code>\"</code> id: The ID of the modifier. Must be formatted as a valid identifier/resource location, e.g. <code>example:slow_from_freezing</code>. Note that if two modifiers have the same ID for the same attribute type, then the one applied later will override the earlier one.</li> <li><code>E</code> operation: How to apply the modifier. Must be one of <code>add_value</code>, <code>add_multiplied_base</code>, or <code>add_multiplied_total</code>.</li> </ul> </li> </ul>"},{"location":"datapacks/temperature_effect_definition/#scaling-attribute-modifier","title":"Scaling Attribute Modifier","text":"<p>The scaling attribute modifier applies an attribute modifier that scales with the entity's temperature</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format_3","title":"Config JSON format","text":"<p>If the type is <code>thermoo:scaling_attribute_modifier</code>, the <code>config</code> has the following format:</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>F</code> scale: Float, the value of the modifier which is multiplied against the temperature scale of the entity. Optional: defaults to 1 if not specified.</li> <li><code>\"</code> attribute_type: Resource Location/Identifier of the attribute type to apply the modifier to.</li> <li><code>\"</code> id: The id of the modifier. Must be formatted as a valid identifier/resource location, e.g. <code>thermoo:slow_from_freezing</code>. Note that if two modifiers have the same ID for the same attribute type, then the one applied later will override the earlier one.</li> <li><code>E</code> operation: How to apply the modifier. Must be one of <code>add_value</code>, <code>add_multiplied_base</code>, or <code>add_multiplied_total</code>.</li> </ul> </li> </ul> <p>Note</p> <p>For 1.20.4 and below: The <code>id</code> field is instead a pair of fields, one being a string UUID field called <code>modifier_uuid</code> and another being a regular string field called <code>name</code>. Furthermore, the <code>operation</code> field required one of <code>add</code>, <code>multiply_base</code> or <code>multiply_total</code>.</p>"},{"location":"datapacks/temperature_effect_definition/#damage","title":"Damage","text":"<p>Applies damage to the entity in regular intervals, or \"pulses\".</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format_4","title":"Config JSON format","text":"<p>If the type is <code>thermoo:damage</code>, the <code>config</code> has the following format:</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>F</code> amount: Float, the amount of damage to apply on each pulse. Must be strictly positive.</li> <li><code>I</code> damage_interval: Integer, the number of ticks between each damage pulse.</li> <li><code>\"</code> damage_type: String Resource Location/Identifier, the damage type to apply to the entity.</li> </ul> </li> </ul>"},{"location":"datapacks/temperature_effect_definition/#freeze-damage-legacy-removed-in-1202","title":"Freeze Damage Legacy (removed in 1.20.2+)","text":"<p>The freeze damage legacy affect will apply freeze damage every few ticks to entities when they match the predicate. This is called \"legacy\" because in 1.19.4, the way damage is applied is changed to be data-driven. This effect hard codes freeze damage rather than allowing for arbitrary damage types. This effect is deprecated in 1.19.4+, but is kept for posterity.</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format_5","title":"Config JSON format","text":"<p>If the type is <code>thermoo:freeze_damage_legacy</code>, the <code>config</code> has the following format:</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>F</code> amount: Float, the amount of freeze damage to apply.</li> <li><code>I</code> damage_interval: Integer, the number of ticks between pulses of damage.</li> </ul> </li> </ul>"},{"location":"datapacks/temperature_effect_definition/#function","title":"Function","text":"<p>A temperature effect that executes datapack functions on an interval. Supports macro functions.</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format_6","title":"Config JSON format","text":"<p>If the type is <code>thermoo:function</code>, the <code>config</code> has the following format:</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>\"</code> function: The ID of the function to execute.</li> <li><code>\"</code> arguments: An SNBT string containing the function's macro arguments. Must be supplied if and only if the specified <code>\"</code> function is a macro function.</li> <li><code>I</code> interval: A positive integer that is the time, in ticks, between executions of the <code>function</code>. OPTIONAL: Defaults to 20, or once per second.</li> <li><code>\"</code> permission_level: The permission level of the function to execute. Optional: Defaults to 2, which is the normal permission level for functions. Note that this does not respect the function permission level set in <code>server.properties</code>, it is only what is set here.</li> </ul> </li> </ul>"},{"location":"datapacks/temperature_effect_definition/#sequence","title":"Sequence","text":"<p>A meta-temperature effect that can be used to apply several other child effects in sequence. The child effects will only apply if the parent effect can be applied as well. This is useful when you have many different effects that should apply under the same conditions.</p> <p>Note: For child effects, there is not much additional performance gain from the <code>entity_type</code> field - but it will still function identically.</p>"},{"location":"datapacks/temperature_effect_definition/#config-json-format_7","title":"Config JSON format","text":"<p>If the type is <code>thermoo:sequence</code>, the <code>config</code> has the following format:</p> <ul> <li><code>{}</code>: The root tag.<ul> <li><code>[]</code> children: An inline list of other temperature effects.</li> </ul> </li> </ul>"},{"location":"datapacks/temperature_effect_definition/#defining-custom-effect-types-mods-only","title":"Defining Custom Effect Types (Mods only!)","text":"<p>You can easily define your own custom temperature effects by extending the class <code>TemperatureEffect</code> and then registering an instance into the custom registry <code>ThermooRegistries.TEMPERATURE_EFFECTS</code>. Scorchful does this to create sound temperature effect, which you can see here.</p>"},{"location":"datapacks/temperature_effect_definition/#examples","title":"Examples","text":"<p>The best examples of how to use these effects can be found in Frostiful and Scorchful.</p> <p>You can also get examples in the Thermoo Test Mod.</p>"},{"location":"mods/armor_materials/","title":"Armor Materials API","text":"<p>The primary use of this API is to provide ways to add Frost and Heat Resistance to armors as easily as possible.</p> <p>Warning</p> <p>This feature is exclusive to Thermoo 4.x for Minecraft versions 1.21-1.21.1, and is deprecated for that version. In 1.21.2, Minecraft removed the Armor Material registry making this API impossible to update. Instead of using this API, mods can use the item attribute modifier event. For datapacks and modpacks, I would recommend checking out the Default Components mod.</p>"},{"location":"mods/armor_materials/#events","title":"Events","text":"<ul> <li><code>ArmorMaterialEvents#GET_HEAT_RESISTANCE</code> - Gets the heat resistance for a particular armor material and armor type</li> <li><code>ArmorMaterialEvents#GET_FROST_RESISTANCE</code> - Gets the frost resistance for a particular armor material and armor type</li> </ul> <p>You must register a listener to these events for resistances to be applied to any armours, the tags below are just for convention/ease of use between mods.</p>"},{"location":"mods/armor_materials/#armor-material-tags","title":"Armor Material Tags","text":"<p>Again, these tags are just for convention. You don't have to use them. In fact, there is a known issue when using the tags to apply heat and frost resistance where it doesn't really work with a datapack's normal world-independence. For now, the tags should only be used in datapacks that apply to all worlds on a modpack/server.</p> <ul> <li><code>thermoo:very_resistant_to_cold</code> and <code>thermoo:very_resistant_to_heat</code>- armor materials that should add a lot of frost/heat resistance (respectively)</li> <li><code>thermoo:resistant_to_cold</code> and <code>thermoo:resistant_to_heat</code>- armor materials that should add a little frost/heat resistance (respectively)</li> <li><code>thermoo:very_weak_to_cold</code> and <code>thermoo:very_weak_to_heat</code>- armor materials that should remove a lot of frost/heat resistance (respectively)</li> <li><code>thermoo:weak_to_cold</code> and <code>thermoo:weak_to_heat</code>- armor materials that should remove a little frost/heat resistance (respectively)</li> </ul> <p>Note</p> <p>These are Armor Material tags, so their elements are armour materials (like <code>minecraft:chainmail</code>), and they go in <code>data/thermoo/tags/armor_material/${tag_path}.json</code>. </p>"},{"location":"mods/environment_controller/","title":"Environment Controller and Events","text":"<p>Warning</p> <p>This feature is deprecated in Minecraft 1.21.1+ and has been replaced with the new Environment API. Please use that instead. This feature will be removed by Thermoo's Minecraft 1.21.5 update, possibly in 1.21.4.</p> <p>The <code>EnvironmentController</code> is an interface that provides configuration and values for wetness change per tick, passive temperature change per tick, block heating, and more. The implementation of this interface can be accessed through the <code>EnvironmentManager</code>. By default, all methods in the controller return <code>0</code>, <code>false</code>, or <code>null</code> (depending on the return type of course), unless specified otherwise. In order to get them to do anything, you will need to write your own decorator of the controller by extending the <code>EnvironmentControllerDecorator</code> class. Your implementation will then need to be registered through the <code>EnvironmentManager</code> in order to take effect.</p> <p>Individual methods are documented in their respective javadoc in the source.</p>"},{"location":"mods/environment_controller/#extending-the-controller","title":"Extending the Controller","text":"<p>The EnvironmentController implements a decorator pattern that allows for mods to apply their own changes to it dynamically with compatibility in mind. If you want to add your own functionality to the environment controller, you must extend <code>EnvironmentControllerDecorator</code> and write your changes there. This decorator allows you to handle previous values created by other controllers, and mods can choose to either use them as the base for further enhancement, or fully overwrite them all together.</p> <p>Then you register your decorator using <code>EnvironmentControllerInitializeEvent</code> in your mod's initializer, with the constructor passed as the listener. For example, <code>EnvironmentControllerInitializeEvent.EVENT.register(MyController::new)</code>. In order to have a better sense of decorator application order when considering other mods, the event is implemented with a phased ordering as follows:</p> <ol> <li><code>Event.DEFAULT_PHASE</code>: The first and default phase of the event. Use this phase for setting base controller values that may be modified/overwritten later. Generally speaking, you can assume that the controller value will be 0. This phase does not need to be specified when registering event listeners.</li> <li><code>EnvironmentControllerInitializeEvent.MODIFY_PHASE</code>: The second phase of the event. Use this to modify the base values of the decorator.</li> <li><code>EnvironmentControllerInitializeEvent.OVERRIDE_PHASE</code>: The third phase of the event. Use this when you want to explicitly overwrite values from other mods.</li> <li><code>EnvironmentControllerInitializeEvent.LISTENER_PHASE</code>: The final phase of the event. Should not be used to update controller values, only read and react to them. For example, add particles when heating/cooling the player.</li> </ol> <p>UML Class diagram of Environment contoller decorator: </p> <p>As an alternative to event registration, you can directly register a controller with <code>EnvironmentManager#addController</code>. However, be careful with this as controllers are destroyed and reinitialized whenever the server stops and starts. In general, it is better to use the initialization event, though <code>addController()</code> can still be useful in cases where you want to temporarily add a controller and then remove it again with <code>EnvironmentManager#peelController</code>, such as mocking out some features of temperature in game tests.</p>"},{"location":"mods/environment_controller/#events","title":"Events","text":"<p>The only other event as of writing is the <code>CAN_APPLY_PASSIVE_TEMPERATURE_CHANGE</code> event in <code>PlayerEnvironmentEvents</code>. This event is used to check if a player can or cannot be subjected to a passive temperature change. If any listener returns <code>false</code>, all further processing is stopped and the result of the event will be <code>false</code>. In order for the event to be triggered, a non-zero temperature change must be computed by <code>EnvironmentController#getLocalTemperatureChange</code>.</p> <p>There are also a few events in the Extra APIs</p>"},{"location":"mods/environment_controller/#examples","title":"Examples","text":""},{"location":"mods/environment_controller/#example-defining-and-registering-a-custom-decorator","title":"Example: Defining and registering a custom decorator","text":"<pre><code>// Custom decorator class\npublic class MagmablockFloorDecorator extends EnvironmentControllerDecorator {\n\n    public MagmablockFloorDecorator(EnvironmentController controller) {\n        super(controller);\n    }\n\n    @Override\n    public int getFloorTemperature(LivingEntity entity, World world, BlockState state, BlockPos pos) {\n        if (state.isOf(Blocks.MAGMA_BLOCK)) {\n            return 5;\n        } else {\n            // Otherwise, fallback to base value. Note that the controller field has protected access in EnvironmentControllerDecorator.\n            return controller.getFloorTemperature(entity, world, state, pos);\n        }\n    }\n}\n\n// Your mod's primary entry point\npublic class ExampleMod implements ModInitializer {\n\n    @Override\n    public void onInitialize() {\n         // ... other initialization logic\n         // Register in the default phase\n         EnvironmentControllerInitializeEvent.EVENT.register(MagmablockFloorDecorator::new);\n         // Alternatively: register in the modify phase\n         EnvironmentControllerInitializeEvent.EVENT.register(EnvironmentControllerInitializeEvent.MODIFY_PHASE, MagmablockFloorDecorator::new);\n    }\n\n}\n</code></pre>"},{"location":"mods/environment_controller/#example-mocking-environment-controller-for-gametests","title":"Example: Mocking Environment Controller for <code>@GameTest</code>s","text":"<p>You can create custom environment controllers for use in tests, to prevent some mechanics (such as passive freezing) from interfering with your other tests, but still retain other functionality, like so:</p> <pre><code>    @BeforeBatch(batchId = \"hotFloorTests\")\n    public void mockController(ServerWorld serverWorld) {\n        // Decorates the current controller with a new anonymously-implemented mock controller \n        EnvironmentManager.INSTANCE.addController(\n                controller -&gt;\n                        new EnvironmentControllerDecorator(controller) {\n                            @Override\n                            public int getLocalTemperatureChange(World world, BlockPos pos) {\n                                return 0;\n                            }\n\n                            @Override\n                            public int getHeatAtLocation(World world, BlockPos pos) {\n                                return 0;\n                            }\n\n                            @Override\n                            public int getTemperatureEffectsChange(LivingEntity entity) {\n                                return 0;\n                            }\n                        }\n        );\n    }\n\n    @AfterBatch(batchId = \"hotFloorTests\")\n    public void resetController(ServerWorld serverWorld) {\n        // Removes the last controller added (in our case, the mock controller)\n        EnvironmentManager.INSTANCE.peelController();\n    }\n</code></pre>"},{"location":"mods/item_attribute/","title":"\u26cf\ufe0f Item Attribute API","text":"<p>Thermoo provides an event, <code>ModifyItemAttributeModifiersCallback.EVENT</code>, that can modify the attribute modifiers on an <code>ItemStack</code> when they are applied to an entity. This works very similarly to the event of the same name that was previously in Fabric API, but was removed in 1.20.5 due to difficulty with porting.</p>"},{"location":"mods/item_attribute/#usage-example","title":"Usage Example","text":"<p>Increase max health of all Helmets when worn in the Head Slot.</p> JavaKotlin <pre><code>static void initialize() {\n    ModifyItemAttributeModifiersCallback.EVENT.register((stack, builder) -&gt; {\n        if (stack.is(ItemTags.HEAD_ARMOR)) {\n            builder.add(\n                    Attributes.MAX_HEALTH,\n                    new AttributeModifier(\n                            ResourceLocation.fromNamespaceAndPath(\"example\", \"helmet_max_hp\"),\n                            4.0,\n                            AttributeModifier.Operation.ADD_VALUE\n                    ),\n                    EquipmentSlotGroup.HEAD\n            );\n        }\n    });\n}\n</code></pre> <pre><code>fun initialize() {\n    ModifyItemAttributeModifiersCallback.EVENT.register { stack, builder -&gt;\n        if (stack.is(ItemTags.HEAD_ARMOR)) {\n            builder.add(\n                    Attributes.MAX_HEALTH,\n                    AttributeModifier(\n                            ResourceLocation.fromNamespaceAndPath(\"example\", \"helmet_max_hp\"),\n                            4.0,\n                            AttributeModifier.Operation.ADD_VALUE\n                    ),\n                    EquipmentSlotGroup.HEAD\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"mods/seasons/","title":"\ud83c\udf42 Seasons API","text":"<p>Thermoo provides the ability for mods to integrate with Seasons mods. Thermoo does not actually add any functionality around seasons - it just provides mods the ability to handle them if they want. In 1.20.1, Fabric Seasons is supported out of the box with just Thermoo installed. However, for newer versions, you must use Thermoo Patches instead.</p>"},{"location":"mods/seasons/#thermoo-seasons","title":"Thermoo Seasons","text":"<p><code>ThermooSeason</code> is a mod-agnostic enum provided by Thermoo to represent the four temperate seasons and the two tropical seasons. The temperate seasons are Spring, Summer, Autumn (or Fall), and Winter. The tropical seasons are wet and dry.</p>"},{"location":"mods/seasons/#season-events","title":"Season Events","text":"<ul> <li><code>ThermooSeasonEvents.GET_CURRENT_SEASON</code> - gets the current temperate season (autumn, spring, winter, summer) for the world, or empty if no season mod is available. Mods can use <code>ThermooSeason.getCurrentSeason(World)</code> as a shorthand to invoke this event to query the current season.</li> <li><code>ThermooSeasonEvents.GET_CURRENT_TROPICAL_SEASON</code> - gets the current tropical season (wet or dry) at the position in the world, or empty if either the queried position is not tropical, or if no tropical season mod is available. Mods can use <code>ThermooSeason.getCurrentTropicalSeason(World, BlockPos)</code> as a shorthand to invoke this event to query the current season.</li> </ul> <p>Info</p> <p>Most of the time, seasons do not need to be queried directly. Instead, use the relevant Environment Provider type.</p>"},{"location":"mods/status_bar_overlay/","title":"\ud83d\udc96 Status Bar Overlay API","text":"<p>While Thermoo is primarily a server-side-only API, the Status Bar Overlay API is a purely client-side API provided by Thermoo. It is intended to help unify the heart overlay used to display temperature in both Frostiful and Scorchful.</p>"},{"location":"mods/status_bar_overlay/#events","title":"Events","text":"<ul> <li><code>StatusBarOverlayRenderEvents.AFTER_HEALTH_BAR</code>: Renders after the player health bar. Provides information necessary for drawing textures perfectly on top of each heart of the health bar.</li> <li><code>StatusBarOverlayRenderEvents.AFTER_MOUNT_HEALTH_BAR</code>: Similar to <code>AFTER_HEALTH_BAR</code>, but for the mount or vehicle health bar. </li> </ul>"},{"location":"mods/temperature_unit/","title":"\ud83c\udf21\ufe0f Temperature Unit API","text":"<p>Thermoo provides four units for storing temperature records: Celsius, Fahrenheit, Kelvin, and Rankine. These units are stored in the <code>TemperatureUnit</code> enum class, which provides the facilities for converting values between these units.</p> <p>The <code>TemperatureRecord</code> class stores a <code>(value, unit)</code> tuple of a temperature recording. This class can also handle things like shifting temperature, conversion between units, and comparisons. It is highly recommended to use this class when working with temperature values.</p> <p>In Kotlin, you can create <code>TemperatureRecord</code> instances using field extensions on numbers provided by <code>TemperatureRecordExtensions</code>.</p>"},{"location":"mods/temperature_unit/#usage-examples","title":"Usage Examples","text":"<p>Apply a 10\u00b0C/18\u00b0F temperature increase to a temperature record.</p> JavaKotlin <pre><code>TemperatureRecord shiftTemperature(TemperatureRecord base) {\n    TemperatureRecord shift = new TemperatureRecord(18, TemperatureUnit.FAHRENHEIT);\n    return base.add(shift);\n}\n</code></pre> <pre><code>import com.github.thedeathlycow.thermoo.api.kt.TemperatureRecordExtensions\n\nfun shiftTemperature(base: TemperatureRecord): TemperatureRecord {\n    return base + 18.F\n}\n</code></pre> <p>Check if a temperature record is at or below the freezing point of water (0\u00b0C/32\u00b0F).</p> JavaKotlin <pre><code>boolean isFreezing(TemperatureRecord temperature) {\n    TemperatureRecord freezing = new TemperatureRecord(0, TemperatureUnit.CELSIUS);\n    return temperature.compareTo(freezing) &lt;= 0;\n}\n</code></pre> <pre><code>import com.github.thedeathlycow.thermoo.api.kt.TemperatureRecordExtensions\n\nfun isFreezing(temperature: TemperatureRecord): Boolean {\n    return temperature &lt;= 0.C\n}\n</code></pre> <p></p>"},{"location":"mods/temperature_unit/#temperature-record-data-format","title":"Temperature Record Data Format","text":"<p>Temperature records can be stored as a number (where the number will be interpreted as the record's value in Celsius), or as a compound with <code>value</code> and <code>unit</code> keys that specify the unit of the record.</p> <ul> <li><code>D</code>: Number. The value of the temperature record in Celsius, or;</li> <li><code>{}</code>: The root tag.<ul> <li><code>D</code> value: Number. The value of the temperature record.</li> <li><code>E</code> unit: The unit of the temperature record. Must be one of <code>celsius</code>, <code>fahrenheit</code>, <code>kelvin</code>, or <code>rankine</code>.</li> </ul> </li> </ul>"},{"location":"mods/temperature_unit/#examples","title":"Examples","text":"<p>Recording a temperature of 30\u00b0C in an Environment Component map.</p> <pre><code>{\n    \"thermoo:temperature\": 30.0\n}\n</code></pre> <p>Recording a temperature of 68\u00b0F in an Environment Component map.</p> <pre><code>{\n    \"thermoo:temperature\": {\n        \"value\": 68.0,\n        \"unit\": \"fahrenheit\"\n    }\n}\n</code></pre> <p>Recording a temperature of 0\u00b0K in an Environment Component map.</p> <pre><code>{\n    \"thermoo:temperature\": {\n        \"value\": 0.0,\n        \"unit\": \"kelvin\"\n    }\n}\n</code></pre>"},{"location":"mods/tick_events/","title":"Tick Events","text":"<p>Thermoo introduces several events to control status changes each tick on entities and players. There are essentially four sets of events: Active Temperature Changes, Passive Temperature Changes, Soaking Changes, and Player Environment Temperature Changes.</p> <p>Each set of events has three events associated with it, following the pattern of:</p> <ol> <li><code>ALLOW_X_UPDATE</code>: Whether to allow the tick update to proceed.</li> <li><code>GET_X_CHANGE</code>: Computes the status point change for the update.</li> <li><code>ALLOW_X_CHANGE</code>: Whether to apply the status point change to the affected entity.</li> </ol> <p>These events are applied in order, but each set can be invoked in any order.</p>"},{"location":"mods/tick_events/#event-categories","title":"Event Categories","text":"Event Category Containing Class Description Active Temperature Changes <code>LivingEntityTemperatureTickEvents</code> Targeted temperature changing effects, such as being on fire. Passive Temperature Changes <code>LivingEntityTemperatureTickEvents</code> Temperature changes sourced from nearby blocks, such as standing on Ice or being near a Campfire. Soaking Changes <code>LivingEntitySoakingTickEvents</code> Changes to an entity's wet ticks. Player Environment Temperature Changes <code>ServerPlayerEnvironmentTickEvents</code> Temperature changes applied to players from their local Environment. <p>All event listeners will receive an <code>EnvironmentTickContext&lt;T&gt;</code> object that contains the information about the entity, their world, and their block position in that world. For players, and players only, updated Environment Components will also be available.</p>"}]}